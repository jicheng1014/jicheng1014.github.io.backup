<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | 哥有石头]]></title>
  <link href="http://jicheng1014.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://jicheng1014.github.io/"/>
  <updated>2015-04-19T12:54:14+08:00</updated>
  <id>http://jicheng1014.github.io/</id>
  <author>
    <name><![CDATA[Atpking]]></name>
    <email><![CDATA[atpking@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[怎样在rails 中进行调试]]></title>
    <link href="http://jicheng1014.github.io/blog/2015/04/19/how-to-debug-in-rails/"/>
    <updated>2015-04-19T12:29:08+08:00</updated>
    <id>http://jicheng1014.github.io/blog/2015/04/19/how-to-debug-in-rails</id>
    <content type="html"><![CDATA[<h2>怎样在 rails 中进行调试</h2>

<h3>背景</h3>

<p>我个人感觉 ruby on rails 是不鼓励调试的，按照设计原则来说，应该是使用测试与 console 来 debug 。但是其实使用断点等调试确实有些时候比较方便，而且其他语言都可以这样做，所以 Ruby on rails 没理由不支持。</p>

<p>大名鼎鼎的 RubyMine 本身当然是实现了这种功能了，但是对于我们这些不喜欢大块头的Vim党来说，怎样处理呢？</p>

<p>答案就是byebug 这个Gem</p>

<h3>gem byebug</h3>

<p>最新的Rails 4.2 已经内置了这个Gem</p>

<pre><code class="ruby"># File Gemfile
group :development, :test do
  # Call 'byebug' anywhere in the code to stop execution and get a debugger console
  gem 'byebug'

  # Access an IRB console on exception pages or by using &lt;%= console %&gt; in views
  gem 'web-console', '~&gt; 2.0'

  # Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring
  gem 'spring'
end
</code></pre>

<p>如果没有，就自己安装一下</p>

<p>安装完毕之后，在你想加断点的地方加入<code>byebug</code>即可，比如下面</p>

<pre><code class="ruby">  def create
    @user = User.new(user_params)

    respond_to do |format|
      byebug
      if @user.save
        format.html { redirect_to @user, notice: 'User was successfully created.' }
        format.json { render :show, status: :created, location: @user }
      else
        format.html { render :new }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end
</code></pre>

<p>当你访问这个页面的时候，rails s 会停留在这里</p>

<pre><code>[26, 35] in /Users/atpking/Code/Ruby/my_rails42/app/controllers/users_controller.rb
   26:   def create
   27:     @user = User.new(user_params)
   28:
   29:     respond_to do |format|
   30:       byebug
=&gt; 31:       if @user.save
   32:         format.html { redirect_to @user, notice: 'User was successfully created.' }
   33:         format.json { render :show, status: :created, location: @user }
   34:       else
   35:         format.html { render :new }
(byebug)
</code></pre>

<p>此时我们可以查看在断点处的所有变量信息，基本等效于console。比如下面我来查看@user 下面有什么信息</p>

<pre><code>   26:   def create
   27:     @user = User.new(user_params)
   28:
   29:     respond_to do |format|
   30:       byebug
=&gt; 31:       if @user.save
   32:         format.html { redirect_to @user, notice: 'User was successfully created.' }
   33:         format.json { render :show, status: :created, location: @user }
   34:       else
   35:         format.html { render :new }
(byebug) @user.to_json
"{\"id\":null,\"name\":\"atpking\",\"born_at\":\"2015-04-19\",\"created_at\":null,\"updated_at\":null}"
(byebug)
</code></pre>

<p>紧接着是常用的 step、next、continue和quit了</p>

<p>在这里大家可以直接敲首字母，敲完首字母之后直接敲回车，代表的是 <strong>执行上一条指令</strong>
移动执行指针，有step (s)和next(n) 分别对应进入和执行一条语句</p>

<p>continue（c）代表执行直至下一个断点，quit（q）代表退出</p>

<p>有时候我们想查看执行指针附近的代码，则需要输入 list</p>

<p>动态加入断点，则使用break + 行号   如 break 33,  行号可以通过list 查询</p>

<p>当然还有很多复杂高级的用法，但是基本的调试，这些指令就够了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[昨日rails 在vagrant上使用capistrano实现自动化部署rails的一些记录]]></title>
    <link href="http://jicheng1014.github.io/blog/2014/11/29/rails-nginx-config/"/>
    <updated>2014-11-29T11:35:47+08:00</updated>
    <id>http://jicheng1014.github.io/blog/2014/11/29/rails-nginx-config</id>
    <content type="html"><![CDATA[<p>昨天折腾了一天关于vagrant、capistrano 部署rails程序，
可能是因为自己不是很懂，基本上搞了一天最后才搞出一点点名堂,
很是惭愧</p>

<p>关于vagrant ，是一个可用于快速配置开发环境的一个虚拟机的应用，可以将常规项目放到虚拟机中进行开发，
官方是说vagrant是用来统一项目组的开发环境云云，其实我觉得倒也还好，真正要统一环境还不如去玩docker，
个人使用vagrant的最方便的就是可以先在自己的机器上实验部署环境，而又不用去运行完整的系统（比如我放的ubuntu 14.04）,
另外一个比较方便的是vagrant 和宿主机器传文件特别方便，实际上是公用一个文件夹
最后的一个比较伤心的理由是你要真正的在virtualbox上跑ubuntu实际上还是略吃资源的，而vagrant上跑它优化过的ubuntu，应该是砍掉了一些资源，
硬盘消耗的略小一些，这样拥有屌丝120G 硬盘的mbp的我不会因为虚拟机而占太多硬盘</p>

<p>在这里推荐happycasts网站的一个视频，我觉得peter的这期视频应该是说的很清楚了，有兴趣的朋友可以<a href="http://happycasts.net/episodes/105">点击这里</a>查看一下</p>

<p>关于capistrano这个自动化部署工具，最开始我把它想的十分复杂，觉得应当从官方网站一行一行的读，由于ruby和英文都不是恨过关，结果非常痛苦，耗费了很多时间。
我不是说啃官方的document不好，这个capistrano的官网写的有些详细，陡然看上去感觉不太好懂（或者我比较愚钝），应该是有所了解了再上这个懒人包，感觉效果会好一些</p>

<p>这里我要说明一些capistrano的使用的一个细节</p>

<p>capistrano 是一个部署每次都要用的东西，所以，如果只需要运行一次的东西，是否有必要写成task？如果要发布到多个计算机上，需要（或者使用一个叫做chef 的工具），如果只有一台服务器，写task的麻烦程度是大于自己配置</p>

<p>我觉得capistrano管理的是每次发布时都需要做的事情，而不是单独一次发布的时候做的事情</p>

<p>另外，capistrano 也没有自动化到可以帮你安装nginx、passenger、rvm，写配置的程度（也许可以，只是很麻烦）,所以这个要在新服务器自己部署搞定</p>

<p>可以参考下这篇文章，案例是使用rbenv的，替换成rvm即可，<a href="http://www.gotealeaf.com/blog/deploy-rails-apps-with-capistrano">Use Capistrano 3 to Deploy Rails Applications - a Step-by-Step Tutorial</a></p>

<p>我当时做的时候有个小插曲：当一切配置完毕的时候 访问这个rails程序，始终报403 错误，但是我current/public 权限肯定够读的。
几经研究之后，发现是nginx的一个配置问题：我使用的是默认的server，它里面有一个location / { &hellip; } 的配置，这个location这段删掉即可（<code>原理未知</code>,求解答）</p>

<p>另外使用capistrano 部署后，直接使用bundle 命令在服务器做事情似乎是不行的   需要使用rvm 指定才行，类似这样
<code>~/.rvm/bin/rvm default do bundle exec rake assets:precompile</code></p>

<p>之后直接在服务器运行rails 命令也会失败，我是又再服务器运行了gem install rails 才能使用的</p>
]]></content>
  </entry>
  
</feed>
