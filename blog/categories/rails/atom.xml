<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | 哥有石头]]></title>
  <link href="http://jicheng1014.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://jicheng1014.github.io/"/>
  <updated>2016-04-10T18:09:24+08:00</updated>
  <id>http://jicheng1014.github.io/</id>
  <author>
    <name><![CDATA[Atpking]]></name>
    <email><![CDATA[atpking@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rails 测试 controller action 的方式]]></title>
    <link href="http://jicheng1014.github.io/blog/2016/04/10/rails-test-controller/"/>
    <updated>2016-04-10T17:53:06+08:00</updated>
    <id>http://jicheng1014.github.io/blog/2016/04/10/rails-test-controller</id>
    <content type="html"><![CDATA[<p>之前写 Rails 测试都是从 models 来写的，原因很简单，controller 的逻辑一般比较简单，不会太容易出错，而 model 里的逻辑比较复杂，稍不留神就会出现问题，只能多测。</p>

<p>但是这种思想就导致了 controller 甚至都不想跑，写完了就直接运行。随着项目的进度不断前进，controller 里的 action 越来越多，同时一次写对的概率也变少了很多，特别是在跟前端对接的时候，状况不断。</p>

<p>本着 <code>吃自己的狗食</code> 的精神，我也开始慢慢的写了一些 controller 的测试</p>

<p>网上关于 controller 的测试大多数都是基于 RSepc 的，由于我不太喜欢这个东西，所以自己使用的是官方默认的 MiniTest, 看了一下官方的源码   大概是这么个样子</p>

<pre><code class="ruby">require 'test_helper'

class FlowTemplatesControllerTest &lt; ActionController::TestCase

  test "could list all flow templates" do
    get :index
    assert_response :success
    response = get :index, language: "ruby"
    json = JSON.parse(response.body)
    assert_response :success
    assert_equal FlowTemplate.where(language: "ruby").count, json.count
  end

  test "could show flow template" do
    flow_template = FlowTemplate.first
    response = get :show, id: flow_template.id.to_s
    json = JSON.parse(response.body)
    assert_equal flow_template.name, json["name"]
  end
end
</code></pre>

<p>能说的可能就是 这个地方可以支持 get post patch delete 了，之后这里会默认找这个 test 命名中对应的 controller。</p>

<p>上面的是最普通的情况，在实际的测试当中，有时候我们还会遇到诸如 这个地方需要登录的情况，但是我在 controller 里手动的去登录非常麻烦（这也是我不想写 controller 的测试的主要原因），其实可以用 instance_eval 来解决这个问题</p>

<pre><code class="ruby">require 'test_helper'

class ProjectsControllerTest &lt; ActionController::TestCase
  setup do
    user = User.first || Fabricate(:user)
    @controller.instance_eval do
      @current_user = user
    end
    @user = user
  end

  test "could list all projects" do
    Fabricate(:project, user: @user)
    assert_equal User.first.id.to_s, Project.first.user.id.to_s
    get :index
    assert_response :success
  end

  test "could create project" do
    assert_equal 0, Project.count
    post :create, { name: "jicheng1014/test", source: "github", git_url: "git@github.com:jicheng1014/test.git" }
    assert_response :success
    assert_equal 1, Project.count
  end
end
</code></pre>

<p>大概就是上面这样， have fun</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初探ActiveJob]]></title>
    <link href="http://jicheng1014.github.io/blog/2015/04/20/how-to-use-active-job-in-rails-4-dot-2/"/>
    <updated>2015-04-20T11:56:47+08:00</updated>
    <id>http://jicheng1014.github.io/blog/2015/04/20/how-to-use-active-job-in-rails-4-dot-2</id>
    <content type="html"><![CDATA[<h2>初探ActiveJob</h2>

<h3>简介</h3>

<p>ActiveJob 是 Rails 4.2 新加入的功能。这个东西在beta阶段rubyChina就已经有很多高手关注了，无奈自己的项目使用的是4.1.5，升级到4.2 的时候其他gem又有很多依赖有问题，所以没在第一时间使用。今天补个课。</p>

<p>ActiveJob 是Rails自己开发运行后台程序的模块，常用于执行运行时间可能很长的工作（比如发送注册邮件）。</p>

<p>当然这种需求实际上非常普遍，所以rails 也有相应的第三方gem来解决这个需求，比如著名的Sidekiq和Resque等。<strong>ActiveJob的出现不是为了代替他们</strong>，而是统一了原来Resque、Sidekiq 等其他gem对后台运行程序的各种千奇百怪的写法。</p>

<h3>定义</h3>

<p>ActiveJob 的使用官方文档已经给出了示例
首先在命令行中使用 <code>rails g job JOBNAME</code> 来新建一个任务</p>

<p>比如这里</p>

<pre><code>➜  my_rails42 git:(master) ✗ rails g job add_lots_of_users
      invoke  test_unit
      create    test/jobs/add_lots_of_users_job_test.rb
      create  app/jobs/add_lots_of_users_job.rb
➜  my_rails42 git:(master) ✗
</code></pre>

<p>我们打开add_lots_of_users_job.rb，可以看到下列内容</p>

<pre><code class="ruby">class AddLotsOfUsersJob &lt; ActiveJob::Base
  queue_as :default

  def perform(*args)
    # Do something later
  end
end
</code></pre>

<p>我们可以将耗时的内容写入<code>perform</code>里</p>

<pre><code class="ruby">  def perform(*args)
    # Do something later
    sleep 10
    1000.times do |index|
      user = User.new
      user.name = "atpking#{index}"
      user.save
    end
  end
</code></pre>

<p>我们可以看到，我在job 里建立了一个作业，先睡10秒，再插入1000条数据到数据库中</p>

<p>至此，我们就成功建立了一个job了，接下来，就是使用了</p>

<h3>使用</h3>

<p>官方demo讲的非常简单，就是在你使用的地方用这个句子：<code>XXJob.perform_later PARAMS</code></p>

<p>比如我这里</p>

<pre><code class="ruby">class UsersController &lt; ApplicationController
  before_action :set_user, only: [:show, :edit, :update, :destroy]

  # GET /users
  # GET /users.json
  def index
    AddLotsOfUsersJob.perform_later
    @users = User.all
  end
end
</code></pre>

<p>我们运行一下试试</p>

<p>运行过程中发现<strong>不像我们预想的那样</strong>，而是访问index 的时候，活生生的等待了10多秒,在获得@users</p>

<pre><code>[ActiveJob] [AddLotsOfUsersJob] [e191c62d-68a9-425f-8a94-b9fe080c141c]    (0.8ms)  commit transaction
[ActiveJob] [AddLotsOfUsersJob] [e191c62d-68a9-425f-8a94-b9fe080c141c]    (0.0ms)  begin transaction
[ActiveJob] [AddLotsOfUsersJob] [e191c62d-68a9-425f-8a94-b9fe080c141c]   SQL (0.2ms)  INSERT INTO "users" ("name", "created_at", "updated_at") VALUES (?, ?, ?)  [["name", "atpking999"], ["created_at", "2015-04-20 04:30:29.320703"], ["updated_at", "2015-04-20 04:30:29.320703"]]
[ActiveJob] [AddLotsOfUsersJob] [e191c62d-68a9-425f-8a94-b9fe080c141c]    (0.6ms)  commit transaction
[ActiveJob] [AddLotsOfUsersJob] [e191c62d-68a9-425f-8a94-b9fe080c141c] Performed AddLotsOfUsersJob from Inline(default) in 12789.38ms
  User Load (2.1ms)  SELECT "users".* FROM "users"
  Rendered users/index.html.erb within layouts/application (186.7ms)
Completed 200 OK in 13210ms (Views: 392.6ms | ActiveRecord: 1166.0ms)
</code></pre>

<p>注意看上面，很多歌ActiveJob 完毕了之后，输出<code>Performed AddLotsOfUsersJob from Inline(default) in 12789.38ms</code>,再执行的<code>select * from users</code></p>

<p>也就是说，默认情况下的ActiveJob 跟我们使用的方法没什么区别，<code>是阻塞</code>的,实际上官方文档也说明了</p>

<blockquote><p>4 Job Execution
If no adapter is set, the job is immediately executedIf no adapter is set, the job is immediately executed.</p></blockquote>

<p>那么我们需要给ActiveJob 指定一个Adapter 了。官方有支持以下的adapter，功能有所不同，需要注意。如果没设定，则是默认的 Active Job Inline ，可以看到一个悲剧，<strong>不支持异步（Async）</strong>，这也是为何我们刚刚等了很长时间</p>

<table>
<thead>
<tr>
<th> function</th>
<th> Async </th>
<th> Queues </th>
<th> Delayed   </th>
<th> Priorities </th>
<th> Timeout </th>
<th> Retries </th>
</tr>
</thead>
<tbody>
<tr>
<td> Backburner        </td>
<td> Yes   </td>
<td> Yes    </td>
<td> Yes       </td>
<td> Yes        </td>
<td> Job     </td>
<td> Global  </td>
</tr>
<tr>
<td> Delayed Job       </td>
<td> Yes   </td>
<td> Yes    </td>
<td> Yes       </td>
<td> Job        </td>
<td> Global  </td>
<td> Global  </td>
</tr>
<tr>
<td> Qu                </td>
<td> Yes   </td>
<td> Yes    </td>
<td> No        </td>
<td> No         </td>
<td> No      </td>
<td> Global  </td>
</tr>
<tr>
<td> Que               </td>
<td> Yes   </td>
<td> Yes    </td>
<td> Yes       </td>
<td> Job        </td>
<td> No      </td>
<td> Job     </td>
</tr>
<tr>
<td> queue_classic     </td>
<td> Yes   </td>
<td> Yes    </td>
<td> No*       </td>
<td> No         </td>
<td> No      </td>
<td> No      </td>
</tr>
<tr>
<td> Resque            </td>
<td> Yes   </td>
<td> Yes    </td>
<td> Yes (Gem) </td>
<td> Queue      </td>
<td> Global  </td>
<td> Yes     </td>
</tr>
<tr>
<td> Sidekiq           </td>
<td> Yes   </td>
<td> Yes    </td>
<td> Yes       </td>
<td> Queue      </td>
<td> No      </td>
<td> Job     </td>
</tr>
<tr>
<td> Sneakers          </td>
<td> Yes   </td>
<td> Yes    </td>
<td> No        </td>
<td> Queue      </td>
<td> Queue   </td>
<td> No      </td>
</tr>
<tr>
<td> Sucker Punch      </td>
<td> Yes   </td>
<td> Yes    </td>
<td> No        </td>
<td> No         </td>
<td> No      </td>
<td> No      </td>
</tr>
<tr>
<td> Active Job Inline(默认的) </td>
<td> No    </td>
<td> Yes    </td>
<td> N/A       </td>
<td> N/A        </td>
<td> N/A     </td>
<td> N/A     </td>
</tr>
<tr>
<td> Active Job        </td>
<td> Yes   </td>
<td> Yes    </td>
<td> Yes       </td>
<td> No         </td>
<td> No      </td>
<td> No      </td>
</tr>
</tbody>
</table>


<p>我选用了sidekiq 作为Adapter，注意这里，你必须要安装过sidekiq,  没安装自然需要你Gemfile 里加一句咯      同时还要安装redis，之后在命令行使用 redis-server &amp; 启用redis 同时也得在命令行里启用sidekiq,直接输入sidekiq &amp; 即可</p>

<p>之后我们需要指定sidekiq 为我们的adapter，我们需要在application.rb 里加入一句话</p>

<p><code>config.active_job.queue_adapter = :sidekiq</code></p>

<p>再次运行index 页面，我们看rails 的日志，就变成了先执行Select * from Users，返回页面结果，再继续执行jobs的内容了。</p>

<pre><code>Started GET "/users" for ::1 at 2015-04-20 12:16:20 +0800
Processing by UsersController#index as HTML
[ActiveJob] Enqueued AddLotsOfUsersJob (Job ID: 50372234-6cf7-4ad2-b886-fd3029f4ea3d) to Sidekiq(default)
2015-04-20T04:16:20Z 79432 TID-ouzlum9ig ActiveJob::QueueAdapters::SidekiqAdapter::JobWrapper JID-eb96be6e314f6926583a1267 INFO: start
  User Load (0.3ms)  SELECT "users".* FROM "users"
  Rendered users/index.html.erb within layouts/application (4.1ms)
Completed 200 OK in 72ms (Views: 57.8ms | ActiveRecord: 0.5ms)


Started GET "/assets/jquery_ujs.self-8e98a7a072a6cee1372d19fff9ff3e6aa1e39a37d89d6f06861637d061113ee7.js?body=1" for ::1 at 2015-04-20 12:16:21 +0800


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2015-04-20 12:16:21 +0800


Started GET "/assets/jquery.self-d03a5518f45df77341bdbe6201ba3bfa547ebba8ed64f0ea56bfa5f96ea7c074.js?body=1" for ::1 at 2015-04-20 12:16:21 +0800


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2015-04-20 12:16:21 +0800


Started GET "/assets/scaffolds.self-a98ac27100e3e5ca7065dbd7c898e5afa02690ec2ef84ccc02f65c4c20057b83.css?body=1" for ::1 at 2015-04-20 12:16:21 +0800


Started GET "/assets/turbolinks.self-c37727e9bd6b2735da5c311aa83fead54ed0be6cc8bd9a65309e9c5abe2cbfff.js?body=1" for ::1 at 2015-04-20 12:16:21 +0800


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2015-04-20 12:16:21 +0800


Started GET "/assets/application.self-3a3c8b61bda630ee689740ce7cbd0dd8ea6fdd45e2c42eef4661ab38cf268afe.js?body=1" for ::1 at 2015-04-20 12:16:21 +0800
2015-04-20T04:16:33Z 79432 TID-ouzlum9ig ActiveJob::QueueAdapters::SidekiqAdapter::JobWrapper JID-eb96be6e314f6926583a1267 INFO: done: 12.828 sec
</code></pre>

<p>请注意上面的这两句话</p>

<pre><code>2015-04-20T04:16:20Z 79432 TID-ouzlum9ig ActiveJob::QueueAdapters::SidekiqAdapter::JobWrapper JID-eb96be6e314f6926583a1267 INFO: start

2015-04-20T04:16:33Z 79432 TID-ouzlum9ig ActiveJob::QueueAdapters::SidekiqAdapter::JobWrapper JID-eb96be6e314f6926583a1267 INFO: done: 12.828 sec
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎样在rails 中进行调试]]></title>
    <link href="http://jicheng1014.github.io/blog/2015/04/19/how-to-debug-in-rails/"/>
    <updated>2015-04-19T12:29:08+08:00</updated>
    <id>http://jicheng1014.github.io/blog/2015/04/19/how-to-debug-in-rails</id>
    <content type="html"><![CDATA[<h2>怎样在 rails 中进行调试</h2>

<h3>背景</h3>

<p>我个人感觉 ruby on rails 是不鼓励调试的，按照设计原则来说，应该是使用测试与 console 来 debug 。但是其实使用断点等调试确实有些时候比较方便，而且其他语言都可以这样做，所以 Ruby on rails 没理由不支持。</p>

<p>大名鼎鼎的 RubyMine 本身当然是实现了这种功能了，但是对于我们这些不喜欢大块头的Vim党来说，怎样处理呢？</p>

<p>答案就是byebug 这个Gem</p>

<h3>gem byebug</h3>

<p>最新的Rails 4.2 已经内置了这个Gem</p>

<pre><code class="ruby"># File Gemfile
group :development, :test do
  # Call 'byebug' anywhere in the code to stop execution and get a debugger console
  gem 'byebug'

  # Access an IRB console on exception pages or by using &lt;%= console %&gt; in views
  gem 'web-console', '~&gt; 2.0'

  # Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring
  gem 'spring'
end
</code></pre>

<p>如果没有，就自己安装一下</p>

<p>安装完毕之后，在你想加断点的地方加入<code>byebug</code>即可，比如下面</p>

<pre><code class="ruby">  def create
    @user = User.new(user_params)

    respond_to do |format|
      byebug
      if @user.save
        format.html { redirect_to @user, notice: 'User was successfully created.' }
        format.json { render :show, status: :created, location: @user }
      else
        format.html { render :new }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end
</code></pre>

<p>当你访问这个页面的时候，rails s 会停留在这里</p>

<pre><code>[26, 35] in /Users/atpking/Code/Ruby/my_rails42/app/controllers/users_controller.rb
   26:   def create
   27:     @user = User.new(user_params)
   28:
   29:     respond_to do |format|
   30:       byebug
=&gt; 31:       if @user.save
   32:         format.html { redirect_to @user, notice: 'User was successfully created.' }
   33:         format.json { render :show, status: :created, location: @user }
   34:       else
   35:         format.html { render :new }
(byebug)
</code></pre>

<p>此时我们可以查看在断点处的所有变量信息，基本等效于console。比如下面我来查看@user 下面有什么信息</p>

<pre><code>   26:   def create
   27:     @user = User.new(user_params)
   28:
   29:     respond_to do |format|
   30:       byebug
=&gt; 31:       if @user.save
   32:         format.html { redirect_to @user, notice: 'User was successfully created.' }
   33:         format.json { render :show, status: :created, location: @user }
   34:       else
   35:         format.html { render :new }
(byebug) @user.to_json
"{\"id\":null,\"name\":\"atpking\",\"born_at\":\"2015-04-19\",\"created_at\":null,\"updated_at\":null}"
(byebug)
</code></pre>

<p>紧接着是常用的 step、next、continue和quit了</p>

<p>在这里大家可以直接敲首字母，敲完首字母之后直接敲回车，代表的是 <strong>执行上一条指令</strong>
移动执行指针，有step (s)和next(n) 分别对应进入和执行一条语句</p>

<p>continue（c）代表执行直至下一个断点，quit（q）代表退出</p>

<p>有时候我们想查看执行指针附近的代码，则需要输入 list</p>

<p>动态加入断点，则使用break + 行号   如 break 33,  行号可以通过list 查询</p>

<p>当然还有很多复杂高级的用法，但是基本的调试，这些指令就够了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[昨日rails 在vagrant上使用capistrano实现自动化部署rails的一些记录]]></title>
    <link href="http://jicheng1014.github.io/blog/2014/11/29/rails-nginx-config/"/>
    <updated>2014-11-29T11:35:47+08:00</updated>
    <id>http://jicheng1014.github.io/blog/2014/11/29/rails-nginx-config</id>
    <content type="html"><![CDATA[<p>昨天折腾了一天关于vagrant、capistrano 部署rails程序，
可能是因为自己不是很懂，基本上搞了一天最后才搞出一点点名堂,
很是惭愧</p>

<p>关于vagrant ，是一个可用于快速配置开发环境的一个虚拟机的应用，可以将常规项目放到虚拟机中进行开发，
官方是说vagrant是用来统一项目组的开发环境云云，其实我觉得倒也还好，真正要统一环境还不如去玩docker，
个人使用vagrant的最方便的就是可以先在自己的机器上实验部署环境，而又不用去运行完整的系统（比如我放的ubuntu 14.04）,
另外一个比较方便的是vagrant 和宿主机器传文件特别方便，实际上是公用一个文件夹
最后的一个比较伤心的理由是你要真正的在virtualbox上跑ubuntu实际上还是略吃资源的，而vagrant上跑它优化过的ubuntu，应该是砍掉了一些资源，
硬盘消耗的略小一些，这样拥有屌丝120G 硬盘的mbp的我不会因为虚拟机而占太多硬盘</p>

<p>在这里推荐happycasts网站的一个视频，我觉得peter的这期视频应该是说的很清楚了，有兴趣的朋友可以<a href="http://happycasts.net/episodes/105">点击这里</a>查看一下</p>

<p>关于capistrano这个自动化部署工具，最开始我把它想的十分复杂，觉得应当从官方网站一行一行的读，由于ruby和英文都不是恨过关，结果非常痛苦，耗费了很多时间。
我不是说啃官方的document不好，这个capistrano的官网写的有些详细，陡然看上去感觉不太好懂（或者我比较愚钝），应该是有所了解了再上这个懒人包，感觉效果会好一些</p>

<p>这里我要说明一些capistrano的使用的一个细节</p>

<p>capistrano 是一个部署每次都要用的东西，所以，如果只需要运行一次的东西，是否有必要写成task？如果要发布到多个计算机上，需要（或者使用一个叫做chef 的工具），如果只有一台服务器，写task的麻烦程度是大于自己配置</p>

<p>我觉得capistrano管理的是每次发布时都需要做的事情，而不是单独一次发布的时候做的事情</p>

<p>另外，capistrano 也没有自动化到可以帮你安装nginx、passenger、rvm，写配置的程度（也许可以，只是很麻烦）,所以这个要在新服务器自己部署搞定</p>

<p>可以参考下这篇文章，案例是使用rbenv的，替换成rvm即可，<a href="http://www.gotealeaf.com/blog/deploy-rails-apps-with-capistrano">Use Capistrano 3 to Deploy Rails Applications - a Step-by-Step Tutorial</a></p>

<p>我当时做的时候有个小插曲：当一切配置完毕的时候 访问这个rails程序，始终报403 错误，但是我current/public 权限肯定够读的。
几经研究之后，发现是nginx的一个配置问题：我使用的是默认的server，它里面有一个location / { &hellip; } 的配置，这个location这段删掉即可（<code>原理未知</code>,求解答）</p>

<p>另外使用capistrano 部署后，直接使用bundle 命令在服务器做事情似乎是不行的   需要使用rvm 指定才行，类似这样
<code>~/.rvm/bin/rvm default do bundle exec rake assets:precompile</code></p>

<p>之后直接在服务器运行rails 命令也会失败，我是又再服务器运行了gem install rails 才能使用的</p>
]]></content>
  </entry>
  
</feed>
