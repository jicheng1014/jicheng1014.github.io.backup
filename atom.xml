<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[哥有石头]]></title>
  <link href="http://jicheng1014.github.io/atom.xml" rel="self"/>
  <link href="http://jicheng1014.github.io/"/>
  <updated>2015-04-18T18:33:44+08:00</updated>
  <id>http://jicheng1014.github.io/</id>
  <author>
    <name><![CDATA[Atpking]]></name>
    <email><![CDATA[atpking@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby的Proc.new 与Lambda 的区别]]></title>
    <link href="http://jicheng1014.github.io/blog/2015/04/18/differences-of-proc-dot-new-and-lambda-in-ruby/"/>
    <updated>2015-04-18T15:18:09+08:00</updated>
    <id>http://jicheng1014.github.io/blog/2015/04/18/differences-of-proc-dot-new-and-lambda-in-ruby</id>
    <content type="html"><![CDATA[<h2>Ruby的Proc.new 与Lambda 的区别</h2>

<h3>缘起，Block 与 Proc</h3>

<p>Block 在ruby 中会像空气一般的存在于大量的代码当中。块最开始是用来循环时候用的东西，但慢慢的，block变成了委托利器，贯穿于各种代码之间。</p>

<p>举个例子，我有一个数组1,2,3,4,5,6   我想得到这个数组的平方
在传统的程序里面，我们这样实现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">answer</span> <span class="o">=</span> <span class="p">[]</span><span class="err">`</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">answer</span><span class="p">[]</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">**</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果在ruby中，我们即可使用块来完成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">answer</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">].</span><span class="nx">map</span> <span class="p">{</span><span class="o">|</span><span class="nx">item</span><span class="o">|</span> <span class="nx">item</span><span class="o">**</span><span class="mi">2</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的{|item| item**2} 就是一个Block。</p>

<p>当然之所以这里的ruby 代码简洁的原因是因为map本身隐藏了一些逻辑，实际上map由模块Emuneration 实现
其实通过上面的代码基本上可以看出，Block类似其他语言中的C#或者java中的委托、事件的实现。</p>

<p>我们来仿照着写一个Block的应用（自行实现map）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyArray</span> <span class="o">&lt;</span> <span class="nb">Array</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_map</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">item</span> <span class="k">in</span> <span class="nb">self</span>
</span><span class='line'>      <span class="nb">p</span> <span class="k">yield</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="no">MyArray</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">push</span> <span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span>
</span><span class='line'>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">my_map</span> <span class="k">do</span> <span class="n">item</span>
</span><span class='line'>  <span class="n">item</span><span class="o">**</span><span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 结果输出 </span>
</span><span class='line'><span class="c1"># 1</span>
</span><span class='line'><span class="c1"># 9</span>
</span><span class='line'><span class="c1"># 25</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们把目光还是集中在<code>{|item| item **2}</code> 中，这个代码是我们手敲上去的，那有没有方式将其放入变量里呢？
答案是   有，就是Proc对象   就是我们的Proc.new 和lambda，他们会返回Proc对象,记得在做参数的时候要加&amp;符号</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyArray</span> <span class="o">&lt;</span> <span class="nb">Array</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_map</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">item</span> <span class="k">in</span> <span class="nb">self</span>
</span><span class='line'>      <span class="k">yield</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_map_using_proc</span><span class="p">(</span><span class="o">&amp;</span><span class="nb">proc</span><span class="p">)</span>   <span class="c1"># 定义的时候就需要表示这是个Proc 对象</span>
</span><span class='line'>    <span class="n">answer</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">item</span> <span class="k">in</span> <span class="nb">self</span>
</span><span class='line'>      <span class="c1">#p proc.class    输出为Proc 对象</span>
</span><span class='line'>      <span class="n">answer</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="nb">proc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">item</span><span class="p">))</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">answer</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="no">MyArray</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">push</span> <span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="n">i</span><span class="o">**</span><span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_lambda</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="n">i</span><span class="o">**</span><span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">arr2</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">my_map_using_proc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_proc</span><span class="p">)</span>  <span class="c1"># 使用的时候也要说明</span>
</span><span class='line'><span class="nb">p</span> <span class="n">arr2</span>
</span><span class='line'>
</span><span class='line'><span class="n">arr3</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">my_map_using_proc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_lambda</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="n">arr3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby 下的Proc.new 和Lambda 都是为了生成我们的Proc 而使用的指令，从大方向上来说，他们功能上非常相似，但从细节上来讲，他们又有一些不同点</p>

<p>相同点非常简单，他们都返回Proc对象，结构一样，那么不同点呢？</p>

<ol>
<li>Proc.new 的参数不需要严格匹配，但是lambda 需要严格匹配</li>
</ol>


<p>  比如这里的<code>func1 = Proc.new {|p,q| p p,q};func1.call("x")</code>， 则输出 <code>"x" nil</code>，但是换做lambda，就不行：</p>

<pre><code class="``">  2.2.0 :014 &gt; func2 = lambda {|p,q| p p,q};func2.call("x")
ArgumentError: wrong number of arguments (1 for 2)
  from (irb):14:in `block in irb_binding'
  from (irb):14:in `call'
  from (irb):14
  from /Users/atpking/.rvm/rubies/ruby-2.2.0/bin/irb:11:in `&lt;main&gt;'
</code></pre>

<ol>
<li>Proc.new 如果里面出现了return，则代表的外部的return，而不是Proc自己的return,则是返回一个Proc对象，比如说</li>
</ol>


<pre><code class="``">  2.2.0 :035 &gt; def Hello
  2.2.0 :036?&gt;   p = Proc.new{return "inner proc"}
  2.2.0 :037?&gt;   p.call
  2.2.0 :038?&gt;   return "func return"
  2.2.0 :039?&gt;   end
  2.2.0 :041 &gt; Hello()
   =&gt; "inner proc"
</code></pre>

<p>注意此处，返回的是inner proc,
注意，如果直接在irb 里写p = Proc.new{return 1}<br/>
之后p.call 的化，是要报localJumpError的，因为此时irb 并没有结束,还没有return</p>

<pre><code class="``">  2.2.0 :061 &gt; def Hello2
  2.2.0 :062?&gt;   p = lambda{return "inner proc"}
  2.2.0 :063?&gt;   p.call
  2.2.0 :064?&gt;   return "func return"
  2.2.0 :065?&gt;   end
   =&gt; :Hello2
  2.2.0 :068 &gt; Hello2()
   =&gt; "func return"
</code></pre>

<p>此处是func return。</p>

<p>那么这些区别会带来什么变化呢？答案是，lambda 可以带参数的回传， 更加灵活了。比如下面的一个例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span> <span class="p">:</span><span class="mi">087</span> <span class="o">&gt;</span> <span class="k">def</span> <span class="nf">my_func</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span> <span class="p">:</span><span class="mi">088</span><span class="o">?&gt;</span>   <span class="n">b</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span><span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="k">return</span> <span class="n">item</span><span class="o">*</span><span class="n">n</span> <span class="p">}</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span> <span class="p">:</span><span class="mi">089</span><span class="o">?&gt;</span>   <span class="k">end</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="ss">:my_func</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span> <span class="p">:</span><span class="mi">090</span> <span class="o">&gt;</span> <span class="n">my_func</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">call</span> <span class="mi">5</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">10</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span> <span class="p">:</span><span class="mi">091</span> <span class="o">&gt;</span> <span class="n">my_func</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="no">Proc</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span> <span class="p">:</span><span class="mi">092</span> <span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>而proc，就会出现下列的问题</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span> <span class="p">:</span><span class="mi">094</span> <span class="o">&gt;</span> <span class="k">def</span> <span class="nf">my_func</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span> <span class="p">:</span><span class="mi">095</span><span class="o">?&gt;</span>   <span class="n">b</span> <span class="o">=</span> <span class="nb">proc</span> <span class="p">{</span><span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="k">return</span> <span class="n">item</span><span class="o">*</span><span class="n">n</span> <span class="p">}</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span> <span class="p">:</span><span class="mi">096</span><span class="o">?&gt;</span>   <span class="k">end</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="ss">:my_func</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span> <span class="p">:</span><span class="mi">097</span> <span class="o">&gt;</span> <span class="n">my_func</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="no">Proc</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span> <span class="p">:</span><span class="mi">098</span> <span class="o">&gt;</span> <span class="n">my_func</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">call</span> <span class="mi">5</span>
</span><span class='line'><span class="ss">LocalJumpError</span><span class="p">:</span> <span class="n">unexpected</span> <span class="k">return</span>
</span><span class='line'>  <span class="n">from</span> <span class="p">(</span><span class="n">irb</span><span class="p">):</span><span class="mi">95</span><span class="ss">:in</span> <span class="sb">`block in my_func&#39;</span>
</span><span class='line'><span class="sb">  from (irb):98:in `</span><span class="n">call</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">  from (irb):98</span>
</span><span class='line'><span class="s1">  from /Users/atpking/.rvm/rubies/ruby-2.2.0/bin/irb:11:in `&lt;main&gt;&#39;</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span> <span class="p">:</span><span class="mi">099</span> <span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[同步时间日志到谷歌日历]]></title>
    <link href="http://jicheng1014.github.io/blog/2015/01/27/sync-my-time-log-to-google-calendar/"/>
    <updated>2015-01-27T11:35:32+08:00</updated>
    <id>http://jicheng1014.github.io/blog/2015/01/27/sync-my-time-log-to-google-calendar</id>
    <content type="html"><![CDATA[<h1>背景</h1>

<blockquote><p>既然“管理时间”是不可能的，那么解决方法就只能是，想尽一切办法真正了解自己，真正了解时间、精确地感知时间；而后再想尽一切办法是自己以及自己的行为与时间“合拍”，就是我的说法&ndash;“与时间做朋友”</p>

<p><strong>&mdash;-李笑来，把时间当做朋友</strong></p></blockquote>

<p>这个项目的灵感来自于一本叫做<a href="http://book.douban.com/subject/1115353/">《奇特的一生》</a>的一本书，这本书描述的主人公擅长把自己的时间记录起来，之后做一些分析统计，从而提高自己对时间的利用。</p>

<p>在主人公的时代，纸和笔是记录的方式，在我们的时代，就喜欢电子化了。</p>

<p>我最开始是通过APP 操作，将数据写入 <strong>谷歌日历</strong> 上的，但是我发现了一些问题：</p>

<ul>
<li>打开日历太麻烦了</li>
<li>日历的时间选择很麻烦，要点很多次手机屏幕，还得精确操作</li>
<li>选完日期还得选标题 又要切换</li>
</ul>


<p>我觉得更快速的方式应该是使用 Evernote 直接以文本形式来记录时间开销，直接打字就好了，不用转换，而且同步起来个人觉得还是挺方便的</p>

<p>但是文字记录可视化程度不高，很难直观的看出时间利用率，那么我们就简单点，写个程序，将文字转化为Google Calendar 的事件。</p>

<p>我在做拆字的时候，有一个原则，就是    文字输入，一定要简单
这是一条典型的记录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1000 1130 做RubyOnRails的练习
</span></code></pre></td></tr></table></div></figure>


<p>代表从10点到11点30 做了ruby on rails 的练习。</p>

<hr />

<h1>初次使用配置</h1>

<h2>1. 确认能访问Google的服务器</h2>

<p>没什么好说的，不行就挂VPN</p>

<h2>2. 开启Google Calendar API,授权为Service account</h2>

<p><strong>为何是Service Account </strong> ?</p>

<p>因为我觉得证书登陆比输入密码简单，还不受Cookie的影响什么的，也许以后会改成Desktop Account</p>

<p><strong> 怎样开启 </strong></p>

<ol>
<li>拥有Google 账户</li>
<li>使用这个账户去开启一个新的Project 项目 <a href="https://console.developers.google.com/project">https://console.developers.google.com/project</a></li>
<li>点击进入你新开的Project 账户，进入API，打开 Google+ (用来做用户验证) 和 Google calendar 的API</li>
<li>进入credential 凭证，在OAuth 建立新的Client ID ，之后选择<strong>service account</strong>,保存，之后系统会提示你下载一个 p12结尾的签名文件，存好了别掉了，这是登录的凭证</li>
</ol>


<h2>3. 添加Google Project 里 Service Account 的Email 到 Google Calendar 的你记录时间的日历的共享账户，并将其权限选择为“拥有这个日历”</h2>

<p> <code>**非常重要，我被坑了好久**</code>  你会在你申请的Project 看到在Oauth下的Service account 有一个Email Address  请把这个地址添加到你Google Calendar 里记录时间的日历的账户共享中</p>

<p> 如果你不这么做，<strong>程序就读不到这个日历</strong></p>

<h2>4. 确认拥有Ruby 环境</h2>

<p>安装ruby请移步<a href="https://github.com/ruby-china/ruby-china/wiki/Mac-OS-X-%E4%B8%8A%E5%AE%89%E8%A3%85-Ruby">ruby china 的教程</a></p>

<h2>5. 安装对应Gem &amp;&amp; 修改配置文件</h2>

<p>脚本运行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/jicheng1014/timelog_to_google_cal
</span><span class='line'>cd timelog_to_google_cal
</span><span class='line'>bundle install
</span><span class='line'>touch raw.txt</span></code></pre></td></tr></table></div></figure>


<p>之后把刚下载的.p12 的签名文件保存到项目同级目录下。</p>

<p>修改配置文件 config.yml ，修改 service_account_email  和key_file 的具体值</p>

<hr />

<h1>日志格式格式</h1>

<p>我在做日志格式的时候，有一个原则，就是 文字输入，一定要简单,无论是在电脑上写，还是在手机、平板上输入，都应该力图简洁。</p>

<p>默认是在raw.txt 中写日志，当然我自己是这么干的，写在Evernote 里，之后需要将数据展现的时候，再拷贝到这个文件当中</p>

<p>格式为</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>开始时间 结束时间 做的事情</span></code></pre></td></tr></table></div></figure>


<ul>
<li>使用24小时进制</li>
<li>时间为双位，中间没有空格  如下午1点30分   则是1330</li>
<li>24点为0点，系统会自动增加一天（对夜猫子友好） 如<code>2330 0010 跑步</code> 代表 晚上11点30到凌晨24:10 跑步</li>
</ul>


<p>这是一条典型的记录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1000 1130 做RubyOnRails的练习
</span><span class='line'>1130 1215 吃饭
</span><span class='line'>
</span><span class='line'>2300 0010 跑步
</span></code></pre></td></tr></table></div></figure>


<hr />

<h1>使用方法</h1>

<p>项目目录下输入 <code>ruby my_date_log [日期差] [日志文件名]</code></p>

<p><strong>日期差</strong></p>

<p>考虑到有可能在晚上0点之后更新，故可减少天数，比如现在是凌晨0147 我的日志记录的实际上是昨天的内容，则我的日期差就是 1</p>

<p>即可执行<code>ruby my_date_log 1</code>  可不填写，默认是0</p>

<p><strong>日志文件</strong></p>

<p>日志的文件名，默认是raw.txt</p>

<h2>特别说明</h2>

<ul>
<li>当你多次同步某天的日志到日历的时候也是可以的，程序会自动删除日志当天的老数据（根据内容标签为日志当天日期，你可以在Google Calendar 里点一个日志看他的详细内容，就是以那个为标注删除的）</li>
<li>联系方式 atpking#gmail com</li>
</ul>


<hr />

<h1>TODO</h1>

<ul>
<li>直接通过Evernote 的API获取日志，之后自动的同步到Google Calendar</li>
<li>做成指令，之后不在项目当前路径上输入</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[买买买，该买的，始终是要买的]]></title>
    <link href="http://jicheng1014.github.io/blog/2014/12/01/buy-buy-buy/"/>
    <updated>2014-12-01T01:40:29+08:00</updated>
    <id>http://jicheng1014.github.io/blog/2014/12/01/buy-buy-buy</id>
    <content type="html"><![CDATA[<p>今年其实买了很多东西，从最开始的hi-vps，之后是macbook pro，再是macbook pro，iphone 6 plus, 还有linode的主机，
今天，又买了一个<strong>大件</strong> <code>codeschool</code>的一年期会员</p>

<p>老美黑色星期五打折，收到邮件说codeschool 现在只要189 USD就可以混一年，以前看过1-2期codeschool 的视频，感觉不错，主持人蛮幽默的.外加制作个人觉得还是比较用心，有一定的水准，但是因为穷癌导致一直没有入手。</p>

<p>其实190USD差不多只折合人民币不到1200块，相当于每个月100块，一天3.3，还没口香糖烧钱，但身为非90互联网原住民，还是有一些思维上的劣势，感觉买这种在线教育类的，总是觉得花上千块略奢侈</p>

<p>当然其实从道理上我还是能理解 金钱换知识是划算的，从逻辑上能够推理出来这笔投资是值得的。</p>

<p>仔细回忆了下今年买的虚拟物品，其实还是蛮多的，小列出来一下</p>

<ul>
<li>hi-vps</li>
<li>阿里云主机 若干</li>
<li>greenvpn</li>
<li>linode vps</li>
<li>电子书若干本 (主要在多看买，似乎还在另外的平台买了几本部署、测试的书，还好都不贵)</li>
<li>史上最坑爹的 air display 2 (特别列出此app,刷新率低的吓人，请广大群众注意，千万别买)</li>
<li>其他apps (不超过100)</li>
<li>railscasts 的一个月会员 (由于版主没更新，所以一直只花了一个月，自动续期)</li>
<li>doit.im 一年会员</li>
<li>pomotodo 一年期会员</li>
<li>迅雷一年期白金会员（估计不会续费了  哈哈哈哈哈哈哈）</li>
<li>codeschool 一年期会员</li>
</ul>


<p>这么一看，还是买了不老少，目前感觉最划算的时linode   除了当主机用，还肩负着ssh 端口转发以及自建vpn的光荣任务，最不值的就是air display2，retina屏幕扩展几本没办法用，卡的直接崩溃，60多块吧，记不清了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[昨日rails 在vagrant上使用capistrano实现自动化部署rails的一些记录]]></title>
    <link href="http://jicheng1014.github.io/blog/2014/11/29/rails-nginx-config/"/>
    <updated>2014-11-29T11:35:47+08:00</updated>
    <id>http://jicheng1014.github.io/blog/2014/11/29/rails-nginx-config</id>
    <content type="html"><![CDATA[<p>昨天折腾了一天关于vagrant、capistrano 部署rails程序，
可能是因为自己不是很懂，基本上搞了一天最后才搞出一点点名堂,
很是惭愧</p>

<p>关于vagrant ，是一个可用于快速配置开发环境的一个虚拟机的应用，可以将常规项目放到虚拟机中进行开发，
官方是说vagrant是用来统一项目组的开发环境云云，其实我觉得倒也还好，真正要统一环境还不如去玩docker，
个人使用vagrant的最方便的就是可以先在自己的机器上实验部署环境，而又不用去运行完整的系统（比如我放的ubuntu 14.04）,
另外一个比较方便的是vagrant 和宿主机器传文件特别方便，实际上是公用一个文件夹
最后的一个比较伤心的理由是你要真正的在virtualbox上跑ubuntu实际上还是略吃资源的，而vagrant上跑它优化过的ubuntu，应该是砍掉了一些资源，
硬盘消耗的略小一些，这样拥有屌丝120G 硬盘的mbp的我不会因为虚拟机而占太多硬盘</p>

<p>在这里推荐happycasts网站的一个视频，我觉得peter的这期视频应该是说的很清楚了，有兴趣的朋友可以<a href="http://happycasts.net/episodes/105">点击这里</a>查看一下</p>

<p>关于capistrano这个自动化部署工具，最开始我把它想的十分复杂，觉得应当从官方网站一行一行的读，由于ruby和英文都不是恨过关，结果非常痛苦，耗费了很多时间。
我不是说啃官方的document不好，这个capistrano的官网写的有些详细，陡然看上去感觉不太好懂（或者我比较愚钝），应该是有所了解了再上这个懒人包，感觉效果会好一些</p>

<p>这里我要说明一些capistrano的使用的一个细节</p>

<p>capistrano 是一个部署每次都要用的东西，所以，如果只需要运行一次的东西，是否有必要写成task？如果要发布到多个计算机上，需要（或者使用一个叫做chef 的工具），如果只有一台服务器，写task的麻烦程度是大于自己配置</p>

<p>我觉得capistrano管理的是每次发布时都需要做的事情，而不是单独一次发布的时候做的事情</p>

<p>另外，capistrano 也没有自动化到可以帮你安装nginx、passenger、rvm，写配置的程度（也许可以，只是很麻烦）,所以这个要在新服务器自己部署搞定</p>

<p>可以参考下这篇文章，案例是使用rbenv的，替换成rvm即可，<a href="http://www.gotealeaf.com/blog/deploy-rails-apps-with-capistrano">Use Capistrano 3 to Deploy Rails Applications - a Step-by-Step Tutorial</a></p>

<p>我当时做的时候有个小插曲：当一切配置完毕的时候 访问这个rails程序，始终报403 错误，但是我current/public 权限肯定够读的。
几经研究之后，发现是nginx的一个配置问题：我使用的是默认的server，它里面有一个location / { &hellip; } 的配置，这个location这段删掉即可（<code>原理未知</code>,求解答）</p>

<p>另外使用capistrano 部署后，直接使用bundle 命令在服务器做事情似乎是不行的   需要使用rvm 指定才行，类似这样
<code>~/.rvm/bin/rvm default do bundle exec rake assets:precompile</code></p>

<p>之后直接在服务器运行rails 命令也会失败，我是又再服务器运行了gem install rails 才能使用的</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于移动互联网的一小搓内容]]></title>
    <link href="http://jicheng1014.github.io/blog/2014/11/24/talk-about-mobile-network/"/>
    <updated>2014-11-24T00:54:57+08:00</updated>
    <id>http://jicheng1014.github.io/blog/2014/11/24/talk-about-mobile-network</id>
    <content type="html"><![CDATA[<p>今天跟老爸打电话，聊天中，我得知了一个很有意思的事情。
我老爸告诉我，他手机流量用超了，超了80多M.
我说，这是正常的，我也偶尔超一下，下次办一个稍微大点的流量包就可以了。之后顺便问了下老爸流量包办的是多大的，
他的回答，让我有些意外</p>

<h2>700MB</h2>

<p>想起我自己的plus，也只是办了400MB的流量。一般一个月也就差不多300-500M左右</p>

<p>一位中老年人在移动网络上花去了超过700M流量，如果有1/100的中老年有这种强需求，那这块的市场有多大？</p>

<p>我就在想，现在的移动互联网市场是不是过分的针对着年轻人，还忽略了一块叫做中老年的用户群体？
我们做IT的总是习惯于把自己的用户定位成15-30岁的年轻人，总觉得人一旦上了年龄了，就不会玩互联网这一套了
但是在我的感觉里，似乎越来越多的中老年，也开始加入到互联网，特别是移动互联网的领域当中了
而且，他们通常，还有一个可以支付他们消费的子女</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从一个叫做GreatPhoto的App想到的]]></title>
    <link href="http://jicheng1014.github.io/blog/2014/11/21/think-about-a-app-named-great-photo/"/>
    <updated>2014-11-21T23:37:04+08:00</updated>
    <id>http://jicheng1014.github.io/blog/2014/11/21/think-about-a-app-named-great-photo</id>
    <content type="html"><![CDATA[<p>今天下载了一个很有意思的应用叫做GreatPhoto的app <a href="https://itunes.apple.com/cn/app/the-great-photo-app/id766214869?mt=8">link</a>
这是一个教学类的App，教人摄影入门。下这个App的起因是当年给柯姐照毕业照时，因为对摄影一直没学，照出来的效果简直不忍直视.
柯姐怒而教学后其实她老人家说的太快，压根没记住。这几天国内app各种白菜价1块钱(请自行脑补那句名言&#8221;一块钱你买不了吃亏，一块钱你买不了上当&#8221;)，多学点东西也没啥不好的。</p>

<p>整个App初看起来非常具有交互性：每当一项属性简述完毕后，会有一个小交互，会让你看这个属性变化所带来的不同效果。</p>

<p>这个app看起来比较简单，几个旋转效果，再加交互，轻轻松松搞掂
但我想了一下，实际的开发难度还是很大的</p>

<p>且不说UI 本身设计非常合理，虽然我只读过一本叫做《<a href="http://book.douban.com/subject/4837333/">写给大家看的设计书</a>》，回想起里面的内容，完全可以把这个app做来当典型的板式分析了,还有包括大量的互动时候的细微变化（点击关闭摄影灯，草图结构的摄影灯随之消失等等）</p>

<p>还有一些更为恐怖的事情：由于要完成交互当中属性变化，图像也跟着变化的功能，则要大量的准备图像，比如如果需要控制3个属性，则要有对应的8张图像，4个属性就是16张，您还别嫌多，得记住每张图片的属性关系，开发的时候别弄混了。</p>

<p>想想这个app 其实只卖1块钱，就觉得这钱真是不好赚啊</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[current_user永不进入model]]></title>
    <link href="http://jicheng1014.github.io/blog/2014/11/21/current-useryong-bu-jin-ru-model/"/>
    <updated>2014-11-21T11:03:57+08:00</updated>
    <id>http://jicheng1014.github.io/blog/2014/11/21/current-useryong-bu-jin-ru-model</id>
    <content type="html"><![CDATA[<p>上次写代码的时候用到了devise，自然也会用到比较常用的current_user
之后我写的时候有这样一个需求</p>

<blockquote><p>在用户新建、保存一个model 的时候，应该顺手保存这个model是由谁建立的</p></blockquote>

<p>我觉得这是一个典型的callback 应用，于是在before_validate 加入了
<code>self.user_id = current_user.id</code>
这个写法,但是很显然的，运行一下程序，没有通过</p>

<p>发现是current_user 没有被正确的读出来</p>

<p>看来current_user 这种东西model 是读不到的。本来想看能否做一些手脚，
但是后来我想了一下，这要是加入进去了，那Rspec该怎么写？</p>

<p>又想起了妈妈的教诲  model 只做model该做的事情。current_user 是页面级别登录后产生的产物，
跟模型自身是没有任何原因的，看来callback 这个策略是行不通了，最多写成validate 提醒自己</p>

<p>只有在controller 下进行验证了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@dress</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">shop</span><span class="o">.</span><span class="n">dresses</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:dress</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@dress</span><span class="o">.</span><span class="n">currency</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">shop</span><span class="o">.</span><span class="n">currency</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@dress</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>       <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>       <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>大概就是这样了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[心浮气躁]]></title>
    <link href="http://jicheng1014.github.io/blog/2014/11/20/xin-fu-qi-zao/"/>
    <updated>2014-11-20T22:59:02+08:00</updated>
    <id>http://jicheng1014.github.io/blog/2014/11/20/xin-fu-qi-zao</id>
    <content type="html"><![CDATA[<p>晚上想阅读一篇文章<a href="https://app.yinxiang.com/l/ABRmgcHsDyRNu6B5GPR7rMBJ_zlKWR8t9DE">rails authorization</a>,
阅读的时候明显的感觉到了自己的心浮气躁，才读可能不到1/4 就开始走神了，点超链点到最后，自己就迷失方向了。</p>

<p>最后看完通篇文章，可能走神4-5次，下次可以记录统计一下</p>

<p>那么是否有解决这个问题的好方案呢？</p>

<p>我决定以后这么试试
0. 关闭发出响声的工具
1. 暂时不看任何超链接，先用evernote记下想掌握的东西
2. 有可能会遇见看不懂的地方
  - 先试着看
  - 实在看不懂了就看之前的超链接是否有帮助，或进行搜索引擎
3. 记录走神的次数
4. 统计</p>

<p>希望这样做会有一些提高吧</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从描述远程工作的blog 想到的]]></title>
    <link href="http://jicheng1014.github.io/blog/2014/11/20/cong-miao-shu-yuan-cheng-gong-zuo-de-blog-xiang-dao-de/"/>
    <updated>2014-11-20T11:32:15+08:00</updated>
    <id>http://jicheng1014.github.io/blog/2014/11/20/cong-miao-shu-yuan-cheng-gong-zuo-de-blog-xiang-dao-de</id>
    <content type="html"><![CDATA[<p>今天看到了一篇不错的文件，名字叫做</p>

<p><a href="http://yizaoyiwan.com/discussion/79/%E4%BB%8E300%E5%88%B0300%E4%B8%87-%E4%B8%80%E4%B8%AA%E8%BF%9C%E7%A8%8B%E5%A4%96%E5%8C%85%E5%9B%A2%E9%98%9F%E7%9A%84%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B%E5%92%8C%E7%BB%8F%E9%AA%8C/p1">从300到300万，一个远程外包团队的发展历程和经验
</a></p>

<p>这是一篇描述一个以wordpress为工具的远程外包团队，虽然按照互联网的规矩，300W的年收入不好说，但是看到这句话的时候，我还是超级激动的</p>

<blockquote><p>i want to thank you for the great work you do pls tell your team that we are really happy with you guys i always appreciate your dedication. and the money part will be different in the future as a matter of fact.</p></blockquote>

<p>外包行业，我感觉到特别吃力的就是一次性买卖，做一个东西辛辛苦苦，最后到成了别人的东西，交钱走人，所以在心态上始终不能保持的很好，正如文章所述的<strong>差不多</strong>导致了客户和自己的理解始终存在偏差。</p>

<p>全文几个点我觉得特别需要注意一下</p>

<ol>
<li>要有勇气砍掉失败的项目</li>
<li>好的合伙人</li>
<li>外语基础</li>
<li>国内外包少做</li>
<li>直面客户</li>
<li>标准化的文档机制</li>
</ol>


<p>最后佩服一下这个博主的现金流以及谈判能力。能够前期无资金的情况下做到杜绝<strong>差不多</strong>，相当厉害，而且能够<strong>收到钱</strong>，这是一项非常重要的技能。想到自己的项目都苦于收不到钱就觉得略伤感。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App Store 1元感想]]></title>
    <link href="http://jicheng1014.github.io/blog/2014/11/20/app-store-1yuan-gan-xiang/"/>
    <updated>2014-11-20T02:22:45+08:00</updated>
    <id>http://jicheng1014.github.io/blog/2014/11/20/app-store-1yuan-gan-xiang</id>
    <content type="html"><![CDATA[<p>今天上网的时候，突然发现app store 的好多软件都1元了，
想到自己前几天刚充了50大洋,脑海里就只有三个字“买买买”</p>

<p>事后发现一个比较奇怪的现象，
大多数1元的是游戏部分，
只能感慨游戏已经成为了app store 最重要的部分了。</p>

<p>另外，买了几个大型游戏后发现，16GB的机器根本就不禁折腾
一个God of fire 就2GB，这基本就没有玩的了
又想起了王自如的那句  16GB谁买谁后悔
但是没钱这可咋整？
买不到这可咋整？
当然归根结底，还是因为不够土豪啊</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[second post]]></title>
    <link href="http://jicheng1014.github.io/blog/2014/11/07/second-post/"/>
    <updated>2014-11-07T17:18:54+08:00</updated>
    <id>http://jicheng1014.github.io/blog/2014/11/07/second-post</id>
    <content type="html"><![CDATA[<p>中文的相关测试
这里测试的是相关的代码</p>

<p><code>
print "Hello world"
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://jicheng1014.github.io/blog/2014/11/07/hello-world/"/>
    <updated>2014-11-07T17:16:14+08:00</updated>
    <id>http://jicheng1014.github.io/blog/2014/11/07/hello-world</id>
    <content type="html"><![CDATA[<p> This is the first blog using markdown stlye code</p>
]]></content>
  </entry>
  
</feed>
